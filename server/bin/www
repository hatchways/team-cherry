#!/ usr / bin / env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

var app = require("../app");
var http = require("http");
var db = require("../db");
const asyncWorker = require("../async-worker");
const scraperQueue = require("../async-worker/scraperQueue");
const emailQueue = require("../async-worker/emailQueue");
const socket = require("socket.io");
const cookie = require("cookie");
const jwt = require("jsonwebtoken");

/* Sets up the PostgreSQL database connection. */

// const force = false;
const alter = true;
const force = true;

async function databaseTest() {
  try {
    await db.authenticate();
    console.log("Connection has been established successfully.");
    await db.sync({ force });
    console.log(`Database is sync'd(force=${force} alter=${alter})`);
  } catch (error) {
    console.error("Unable to connect to the database:", error);
  }
}
databaseTest();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);

  // Setup Socket.io
  var io = socket(server);
  let loggedInUsers = [];
  io.on("connection", function (socket) {
    let token = cookie.parse(socket.request.headers.cookie).token;

    jwt.verify(token, "secret", function (err, decoded) {
      if (err) {
        console.log(
          "Token authentication failed for socket id: " +
          socket.id +
          ". Disconnected. "
        );
        socket.disconnect();
      } else {
        let keywords = socket.handshake.query.keywords;
        if (!keywords) {
          keywords = "";
        }
        let platformSelected = socket.handshake.query.platformSelected;
        if (platformSelected) {
          platformSelected = platformSelected.split(",");
        } else {
          platformSelected = [];
        }

        loggedInUsers.push({
          socket: socket,
          userId: decoded.id,
          keywords: keywords,
          platformSelected: platformSelected,
        });
      }
    });

    socket.on("disconnect", (reason) => {
      let index = -1;

      for (let i = 0; i < loggedInUsers.length; i++) {
        if (loggedInUsers[i].socket.id === socket.id) {
          index = i;
          break;
        }
      }

      if (index !== -1) {
        loggedInUsers.splice(index, 1);
      } else {
        console.log("Error: cannot find user when disconnecting. ");
      }
    });

    socket.on("setKeywords", (data) => {
      let index = -1;

      for (let i = 0; i < loggedInUsers.length; i++) {
        if (loggedInUsers[i].socket.id === socket.id) {
          index = i;
          break;
        }
      }

      if (index !== -1) {
        let keywords = data.keywords;
        if (!keywords) {
          keywords = "";
        }

        loggedInUsers[index].keywords = keywords;
      } else {
        console.log("Error: cannot find user when setting keywords. ");
      }
    });

    socket.on("setPlatformSelected", (data) => {
      let index = -1;

      for (let i = 0; i < loggedInUsers.length; i++) {
        if (loggedInUsers[i].socket.id === socket.id) {
          index = i;
          break;
        }
      }

      if (index !== -1) {
        loggedInUsers[index].platformSelected = data.platformSelected;
      } else {
        console.log("Error: cannot find user when setting platformSelected. ");
      }
    });
  });

  scraperQueue(loggedInUsers);
  // emailQueue();
  console.log("Listening on " + bind);
}
